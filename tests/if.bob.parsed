at 4:6: unknown variable x, assuming var int
at 29:17: unknown variable pouet, assuming var int
[TRANSLATION_UNIT,
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'main']
		]
		[COMPOUND_STATEMENT,
			[EXPRESSION_LIST,
				[OPERATOR,
					[TOKEN_OPERATOR, '=']
					[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
					[TOKEN_IDENTIFIER, '3']
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent main):
					}
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '3']
					]
				]
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '=']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '20']
					]
				]
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '=']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '3']
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '==']
							[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
							[TOKEN_IDENTIFIER, '5']
						]
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent main):
					}
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '3']
					]
				]
				[EXPRESSION_LIST,
					[PREFIX_OPERATOR,
						[TOKEN_OPERATOR, '++']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent main):
					}
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'printi']
					[FUNCTION_ARG_LIST,
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
					{ FUNCTION "printi" }
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'testelse']
					[FUNCTION_ARG_LIST,
					]
					{ FUNCTION "testelse" }
				]
			]
			{ SCOPE main (parent global_scope):
				Vars: { VAR "a" TYPE "int" }, { VAR "x" TYPE "int" }
			}
		]
		{ FUNCTION "main" }
	]
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'testelse']
		]
		[COMPOUND_STATEMENT,
			[EXPRESSION_LIST,
				[OPERATOR,
					[TOKEN_OPERATOR, '=']
					[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					[TOKEN_IDENTIFIER, '0']
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, '5']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent testelse):
					}
				]
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '=']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '2']
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '==']
							[TOKEN_IDENTIFIER, 'b' { VAR "b" TYPE "int" } ]
							[TOKEN_IDENTIFIER, '6']
						]
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent testelse):
					}
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '=']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
							[OPERATOR,
								[TOKEN_OPERATOR, '*']
								[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
								[TOKEN_IDENTIFIER, '42']
							]
						]
					]
					{ SCOPE block (parent testelse):
					}
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[EXPRESSION_LIST,
					[PREFIX_OPERATOR,
						[TOKEN_OPERATOR, '++']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
				]
				[EXPRESSION_LIST,
					[TOKEN_IDENTIFIER, 'pouet' { VAR "pouet" TYPE "int" } ]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a' { VAR "a" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent testelse):
					}
				]
				[EXPRESSION_LIST,
					[TOKEN_IDENTIFIER, '42']
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'printi']
					[FUNCTION_ARG_LIST,
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
					{ FUNCTION "printi" }
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'testelseif']
					[FUNCTION_ARG_LIST,
					]
					{ FUNCTION "testelseif" }
				]
			]
			{ SCOPE testelse (parent global_scope):
				Vars: { VAR "x" TYPE "int" }, { VAR "b" TYPE "int" }, { VAR "a" TYPE "int" }, { VAR "pouet" TYPE "int" }
			}
		]
		{ FUNCTION "testelse" }
	]
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'testelseif']
		]
		[COMPOUND_STATEMENT,
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, '3']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[EXPRESSION_LIST,
					[FUNCTION_CALL,
						[TOKEN_PARENTHESE_START, '(']
						[TOKEN_IDENTIFIER, 'printi']
						[FUNCTION_ARG_LIST,
							[TOKEN_IDENTIFIER, '2']
						]
						{ FUNCTION "printi" }
					]
				]
				[IF_STATEMENT,
					[TOKEN_IF, 'if']
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '==']
							[TOKEN_IDENTIFIER, '3']
							[TOKEN_IDENTIFIER, '3']
						]
					]
					[EXPRESSION_LIST,
						[FUNCTION_CALL,
							[TOKEN_PARENTHESE_START, '(']
							[TOKEN_IDENTIFIER, 'printi']
							[FUNCTION_ARG_LIST,
								[TOKEN_IDENTIFIER, '3']
							]
							{ FUNCTION "printi" }
						]
					]
					[EXPRESSION_LIST,
						[FUNCTION_CALL,
							[TOKEN_PARENTHESE_START, '(']
							[TOKEN_IDENTIFIER, 'printi']
							[FUNCTION_ARG_LIST,
								[TOKEN_IDENTIFIER, '4']
							]
							{ FUNCTION "printi" }
						]
					]
				]
			]
			{ SCOPE testelseif (parent global_scope):
			}
		]
		{ FUNCTION "testelseif" }
	]
	{ SCOPE global_scope (parent (null)):
		Types:
		{ TYPE "int" INTEGER (size 4) }
		{ TYPE "char" INTEGER (size 1) }
		{ TYPE "string" INTEGER (size 1) }
	
		Functions:
		{ FUNC "printi" RETURNTYPE "(null)"
			Args: { VAR "i" TYPE "int" }
		}
		{ FUNC "prints" RETURNTYPE "(null)"
			Args: { VAR "s" TYPE "string" }
		}
		{ FUNC "main" RETURNTYPE "(null)" }
		{ FUNC "testelse" RETURNTYPE "(null)" }
		{ FUNC "testelseif" RETURNTYPE "(null)" }
		
	}
]
