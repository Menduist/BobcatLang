TOKEN_FUNC (2): func (1)
TOKEN_IDENTIFIER (4): main (1)
TOKEN_PARENTHESE_START (11): ( (1)
TOKEN_PARENTHESE_END (12): ) (1)
TOKEN_BLOCK_START (9): { (1)
TOKEN_IDENTIFIER (4): a (2)
TOKEN_OPERATOR (5): = (2)
TOKEN_IDENTIFIER (4): 3 (2)
TOKEN_IF (6): if (3)
TOKEN_IDENTIFIER (4): a (3)
TOKEN_OPERATOR (5): == (3)
TOKEN_IDENTIFIER (4): 5 (3)
TOKEN_BLOCK_START (9): { (3)
TOKEN_OPERATOR (5): ++ (4)
TOKEN_IDENTIFIER (4): x (4)
TOKEN_BLOCK_END (10): } (5)
TOKEN_IF (6): if (6)
TOKEN_IDENTIFIER (4): a (6)
TOKEN_OPERATOR (5): == (6)
TOKEN_IDENTIFIER (4): 3 (6)
TOKEN_IDENTIFIER (4): x (6)
TOKEN_OPERATOR (5): = (6)
TOKEN_IDENTIFIER (4): 20 (6)
TOKEN_ELSE (7): else (6)
TOKEN_IDENTIFIER (4): x (6)
TOKEN_OPERATOR (5): = (6)
TOKEN_IDENTIFIER (4): 3 (6)
TOKEN_IF (6): if (7)
TOKEN_PARENTHESE_START (11): ( (7)
TOKEN_IDENTIFIER (4): a (7)
TOKEN_OPERATOR (5): == (7)
TOKEN_IDENTIFIER (4): 5 (7)
TOKEN_PARENTHESE_END (12): ) (7)
TOKEN_BLOCK_START (9): { (7)
TOKEN_OPERATOR (5): ++ (8)
TOKEN_IDENTIFIER (4): x (8)
TOKEN_BLOCK_END (10): } (9)
TOKEN_IF (6): if (10)
TOKEN_IDENTIFIER (4): a (10)
TOKEN_OPERATOR (5): == (10)
TOKEN_IDENTIFIER (4): 3 (10)
TOKEN_OPERATOR (5): ++ (11)
TOKEN_IDENTIFIER (4): x (11)
TOKEN_IF (6): if (12)
TOKEN_IDENTIFIER (4): a (12)
TOKEN_OPERATOR (5): == (12)
TOKEN_IDENTIFIER (4): 5 (12)
TOKEN_BLOCK_START (9): { (12)
TOKEN_OPERATOR (5): ++ (12)
TOKEN_IDENTIFIER (4): x (12)
TOKEN_BLOCK_END (10): } (12)
TOKEN_IDENTIFIER (4): print (13)
TOKEN_PARENTHESE_START (11): ( (13)
TOKEN_IDENTIFIER (4): x (13)
TOKEN_PARENTHESE_END (12): ) (13)
TOKEN_IDENTIFIER (4): testelse (14)
TOKEN_PARENTHESE_START (11): ( (14)
TOKEN_PARENTHESE_END (12): ) (14)
TOKEN_BLOCK_END (10): } (15)
TOKEN_FUNC (2): func (17)
TOKEN_IDENTIFIER (4): testelse (17)
TOKEN_PARENTHESE_START (11): ( (17)
TOKEN_PARENTHESE_END (12): ) (17)
TOKEN_BLOCK_START (9): { (17)
TOKEN_IDENTIFIER (4): x (18)
TOKEN_OPERATOR (5): = (18)
TOKEN_IDENTIFIER (4): 0 (18)
TOKEN_IF (6): if (19)
TOKEN_IDENTIFIER (4): 5 (19)
TOKEN_OPERATOR (5): == (19)
TOKEN_IDENTIFIER (4): 5 (19)
TOKEN_BLOCK_START (9): { (19)
TOKEN_OPERATOR (5): ++ (20)
TOKEN_IDENTIFIER (4): x (20)
TOKEN_BLOCK_END (10): } (21)
TOKEN_ELSE (7): else (22)
TOKEN_IDENTIFIER (4): x (23)
TOKEN_OPERATOR (5): = (23)
TOKEN_IDENTIFIER (4): 2 (23)
TOKEN_IF (6): if (25)
TOKEN_PARENTHESE_START (11): ( (25)
TOKEN_IDENTIFIER (4): b (25)
TOKEN_OPERATOR (5): == (25)
TOKEN_IDENTIFIER (4): 6 (25)
TOKEN_PARENTHESE_END (12): ) (25)
TOKEN_BLOCK_START (9): { (25)
TOKEN_OPERATOR (5): ++ (26)
TOKEN_IDENTIFIER (4): x (26)
TOKEN_BLOCK_END (10): } (27)
TOKEN_ELSE (7): else (27)
TOKEN_BLOCK_START (9): { (27)
TOKEN_IDENTIFIER (4): x (27)
TOKEN_OPERATOR (5): = (27)
TOKEN_IDENTIFIER (4): x (27)
TOKEN_OPERATOR (5): * (27)
TOKEN_IDENTIFIER (4): 42 (27)
TOKEN_BLOCK_END (10): } (27)
TOKEN_IF (6): if (28)
TOKEN_IDENTIFIER (4): a (28)
TOKEN_OPERATOR (5): == (28)
[TRANSLATION_UNIT,
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'main']
		]
		[COMPOUND_STATEMENT,
			[EXPRESSION_LIST,
				[OPERATOR,
					[TOKEN_OPERATOR, '=']
					[TOKEN_IDENTIFIER, 'a']
					[TOKEN_IDENTIFIER, '3']
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x']
						]
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a']
						[TOKEN_IDENTIFIER, '3']
					]
				]
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '=']
						[TOKEN_IDENTIFIER, 'x']
						[TOKEN_IDENTIFIER, '20']
					]
				]
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '=']
						[TOKEN_IDENTIFIER, 'x']
						[TOKEN_IDENTIFIER, '3']
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '==']
							[TOKEN_IDENTIFIER, 'a']
							[TOKEN_IDENTIFIER, '5']
						]
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x']
						]
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a']
						[TOKEN_IDENTIFIER, '3']
					]
				]
				[EXPRESSION_LIST,
					[PREFIX_OPERATOR,
						[TOKEN_OPERATOR, '++']
						[TOKEN_IDENTIFIER, 'x']
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x']
						]
					]
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'print']
					[FUNCTION_ARG_LIST,
						[TOKEN_IDENTIFIER, 'x']
					]
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'testelse']
					[FUNCTION_ARG_LIST,
					]
				]
			]
		]
		{ SCOPE main (parent global_scope):
		}
	]
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'testelse']
		]
		[COMPOUND_STATEMENT,
			[EXPRESSION_LIST,
				[OPERATOR,
					[TOKEN_OPERATOR, '=']
					[TOKEN_IDENTIFIER, 'x']
					[TOKEN_IDENTIFIER, '0']
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, '5']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x']
						]
					]
				]
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '=']
						[TOKEN_IDENTIFIER, 'x']
						[TOKEN_IDENTIFIER, '2']
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '==']
							[TOKEN_IDENTIFIER, 'b']
							[TOKEN_IDENTIFIER, '6']
						]
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x']
						]
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '=']
							[TOKEN_IDENTIFIER, 'x']
							[OPERATOR,
								[TOKEN_OPERATOR, '*']
								[TOKEN_IDENTIFIER, 'x']
								[TOKEN_IDENTIFIER, '42']
							]
						]
					]
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[EXPRESSION_LIST,
					[PREFIX_OPERATOR,
						[TOKEN_OPERATOR, '++']
						[TOKEN_IDENTIFIER, 'x']
					]
				]
				[EXPRESSION_LIST,
					[TOKEN_IDENTIFIER, 'pouet']
				]
			]
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, 'a']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x']
						]
					]
				]
				[EXPRESSION_LIST,
					[TOKEN_IDENTIFIER, '42']
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'print']
					[FUNCTION_ARG_LIST,
						[TOKEN_IDENTIFIER, 'x']
					]
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'testelseif']
					[FUNCTION_ARG_LIST,
					]
				]
			]
		]
		{ SCOPE testelse (parent global_scope):
		}
	]
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'testelseif']
		]
		[COMPOUND_STATEMENT,
			[IF_STATEMENT,
				[TOKEN_IF, 'if']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '==']
						[TOKEN_IDENTIFIER, '3']
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[EXPRESSION_LIST,
					[FUNCTION_CALL,
						[TOKEN_PARENTHESE_START, '(']
						[TOKEN_IDENTIFIER, 'print']
						[FUNCTION_ARG_LIST,
							[TOKEN_IDENTIFIER, '2']
						]
					]
				]
				[IF_STATEMENT,
					[TOKEN_IF, 'if']
					[EXPRESSION_LIST,
						[OPERATOR,
							[TOKEN_OPERATOR, '==']
							[TOKEN_IDENTIFIER, '3']
							[TOKEN_IDENTIFIER, '3']
						]
					]
					[EXPRESSION_LIST,
						[FUNCTION_CALL,
							[TOKEN_PARENTHESE_START, '(']
							[TOKEN_IDENTIFIER, 'print']
							[FUNCTION_ARG_LIST,
								[TOKEN_IDENTIFIER, '3']
							]
						]
					]
					[EXPRESSION_LIST,
						[FUNCTION_CALL,
							[TOKEN_PARENTHESE_START, '(']
							[TOKEN_IDENTIFIER, 'print']
							[FUNCTION_ARG_LIST,
								[TOKEN_IDENTIFIER, '4']
							]
						]
					]
				]
			]
		]
		{ SCOPE testelseif (parent global_scope):
		}
	]
	{ SCOPE global_scope (parent (null)):
		Types:
		{ TYPE "int" INTEGER (size 4) }
		{ TYPE "char" INTEGER (size 1) }
	
		Functions:
		{ FUNC "main" RETURNTYPE "(null)" }
		{ FUNC "testelse" RETURNTYPE "(null)" }
		{ FUNC "testelseif" RETURNTYPE "(null)" }
		
	}
]
