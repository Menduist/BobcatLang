TOKEN_FUNC (2): func (1)
TOKEN_IDENTIFIER (4): testwhile (1)
TOKEN_PARENTHESE_START (11): ( (1)
TOKEN_PARENTHESE_END (12): ) (1)
TOKEN_BLOCK_START (9): { (1)
TOKEN_IDENTIFIER (4): int (2)
TOKEN_IDENTIFIER (4): x (2)
TOKEN_WHILE (8): while (3)
TOKEN_PARENTHESE_START (11): ( (3)
TOKEN_IDENTIFIER (4): x (3)
TOKEN_OPERATOR (5): < (3)
TOKEN_IDENTIFIER (4): 5 (3)
TOKEN_PARENTHESE_END (12): ) (3)
TOKEN_BLOCK_START (9): { (3)
TOKEN_IDENTIFIER (4): printi (4)
TOKEN_PARENTHESE_START (11): ( (4)
TOKEN_IDENTIFIER (4): x (4)
TOKEN_PARENTHESE_END (12): ) (4)
TOKEN_OPERATOR (5): ++ (5)
TOKEN_IDENTIFIER (4): x (5)
TOKEN_BLOCK_END (10): } (6)
TOKEN_WHILE (8): while (7)
TOKEN_PARENTHESE_START (11): ( (7)
TOKEN_IDENTIFIER (4): x (7)
TOKEN_OPERATOR (5): < (7)
TOKEN_IDENTIFIER (4): 5 (7)
TOKEN_PARENTHESE_END (12): ) (7)
TOKEN_OPERATOR (5): ++ (7)
TOKEN_IDENTIFIER (4): x (7)
TOKEN_BLOCK_END (10): } (8)
TOKEN_FUNC (2): func (10)
TOKEN_IDENTIFIER (4): main (10)
TOKEN_PARENTHESE_START (11): ( (10)
TOKEN_PARENTHESE_END (12): ) (10)
TOKEN_BLOCK_START (9): { (10)
TOKEN_IDENTIFIER (4): testwhile (11)
TOKEN_PARENTHESE_START (11): ( (11)
TOKEN_PARENTHESE_END (12): ) (11)
TOKEN_BLOCK_END (10): } (12)
[TRANSLATION_UNIT,
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'testwhile']
		]
		[COMPOUND_STATEMENT,
			[VARIABLE_DECLARATION,
				[TOKEN_IDENTIFIER, 'int']
				[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
			]
			[WHILE_STATEMENT,
				[TOKEN_WHILE, 'while']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '<']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[FUNCTION_CALL,
							[TOKEN_PARENTHESE_START, '(']
							[TOKEN_IDENTIFIER, 'printi']
							[FUNCTION_ARG_LIST,
								[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
							]
							{ FUNCTION "printi" }
						]
					]
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					{ SCOPE block (parent testwhile):
					}
				]
			]
			[WHILE_STATEMENT,
				[TOKEN_WHILE, 'while']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '<']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[EXPRESSION_LIST,
					[PREFIX_OPERATOR,
						[TOKEN_OPERATOR, '++']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
				]
			]
			{ SCOPE testwhile (parent global_scope):
				Vars: { VAR "x" TYPE "int" }
			}
		]
		{ FUNCTION "testwhile" }
	]
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'main']
		]
		[COMPOUND_STATEMENT,
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'testwhile']
					[FUNCTION_ARG_LIST,
					]
					{ FUNCTION "testwhile" }
				]
			]
			{ SCOPE main (parent global_scope):
			}
		]
		{ FUNCTION "main" }
	]
	{ SCOPE global_scope (parent (null)):
		Types:
		{ TYPE "int" INTEGER (size 4) }
		{ TYPE "char" INTEGER (size 1) }
		{ TYPE "string" INTEGER (size 1) }
	
		Functions:
		{ FUNC "printi" RETURNTYPE "(null)"
			Args: { VAR "i" TYPE "int" }
		}
		{ FUNC "prints" RETURNTYPE "(null)"
			Args: { VAR "s" TYPE "string" }
		}
		{ FUNC "testwhile" RETURNTYPE "(null)" }
		{ FUNC "main" RETURNTYPE "(null)" }
		
	}
]
