[TRANSLATION_UNIT,
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'testwhile']
		]
		[COMPOUND_STATEMENT,
			[VARIABLE_DECLARATION,
				[TOKEN_IDENTIFIER, 'int']
				[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
			]
			[WHILE_STATEMENT,
				[TOKEN_WHILE, 'while']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '<']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '30']
					]
				]
				[COMPOUND_STATEMENT,
					[EXPRESSION_LIST,
						[PREFIX_OPERATOR,
							[TOKEN_OPERATOR, '++']
							[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						]
					]
					[IF_STATEMENT,
						[TOKEN_IF, 'if']
						[EXPRESSION_LIST,
							[EXPRESSION_LIST,
								[OPERATOR,
									[TOKEN_OPERATOR, '==']
									[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
									[TOKEN_IDENTIFIER, '3']
								]
							]
						]
						[JUMP_STATEMENT,
							[TOKEN_CONTINUE, 'continue']
						]
					]
					[EXPRESSION_LIST,
						[FUNCTION_CALL,
							[TOKEN_PARENTHESE_START, '(']
							[TOKEN_IDENTIFIER, 'printi']
							[FUNCTION_ARG_LIST,
								[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
							]
							{ FUNCTION "printi" }
						]
					]
					[IF_STATEMENT,
						[TOKEN_IF, 'if']
						[EXPRESSION_LIST,
							[EXPRESSION_LIST,
								[OPERATOR,
									[TOKEN_OPERATOR, '==']
									[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
									[TOKEN_IDENTIFIER, '23']
								]
							]
						]
						[JUMP_STATEMENT,
							[TOKEN_BREAK, 'break']
						]
					]
					{ SCOPE block (parent testwhile):
					}
				]
			]
			[WHILE_STATEMENT,
				[TOKEN_WHILE, 'while']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '>']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '5']
					]
				]
				[EXPRESSION_LIST,
					[PREFIX_OPERATOR,
						[TOKEN_OPERATOR, '--']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'printi']
					[FUNCTION_ARG_LIST,
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
					{ FUNCTION "printi" }
				]
			]
			[WHILE_STATEMENT,
				[TOKEN_WHILE, 'while']
				[EXPRESSION_LIST,
					[OPERATOR,
						[TOKEN_OPERATOR, '<']
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
						[TOKEN_IDENTIFIER, '10']
					]
				]
				[IF_STATEMENT,
					[TOKEN_IF, 'if']
					[EXPRESSION_LIST,
						[EXPRESSION_LIST,
							[OPERATOR,
								[TOKEN_OPERATOR, '==']
								[PREFIX_OPERATOR,
									[TOKEN_OPERATOR, '++']
									[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
								]
								[TOKEN_IDENTIFIER, '8']
							]
						]
					]
					[JUMP_STATEMENT,
						[TOKEN_RETURN, 'return']
					]
				]
			]
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'printi']
					[FUNCTION_ARG_LIST,
						[TOKEN_IDENTIFIER, 'x' { VAR "x" TYPE "int" } ]
					]
					{ FUNCTION "printi" }
				]
			]
			{ SCOPE testwhile (parent global_scope):
				Vars: { VAR "x" TYPE "int" }
			}
		]
		{ FUNCTION "testwhile" }
	]
	[FUNCTION_DEFINITION,
		[DECLARATOR,
			[TOKEN_IDENTIFIER, 'main']
		]
		[COMPOUND_STATEMENT,
			[EXPRESSION_LIST,
				[FUNCTION_CALL,
					[TOKEN_PARENTHESE_START, '(']
					[TOKEN_IDENTIFIER, 'testwhile']
					[FUNCTION_ARG_LIST,
					]
					{ FUNCTION "testwhile" }
				]
			]
			{ SCOPE main (parent global_scope):
			}
		]
		{ FUNCTION "main" }
	]
	{ SCOPE global_scope (parent (null)):
		Types:
		{ TYPE "int" INTEGER (size 4) }
		{ TYPE "char" INTEGER (size 1) }
		{ TYPE "string" INTEGER (size 1) }
	
		Functions:
		{ FUNC "printi" RETURNTYPE "(null)"
			Args: { VAR "i" TYPE "int" }
		}
		{ FUNC "prints" RETURNTYPE "(null)"
			Args: { VAR "s" TYPE "string" }
		}
		{ FUNC "testwhile" RETURNTYPE "(null)" }
		{ FUNC "main" RETURNTYPE "(null)" }
		
	}
]
